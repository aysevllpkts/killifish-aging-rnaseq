# Generate new column names in the format: Age_Sex_Number
new_colnames <- paste((colData)$Age, (colData)$Sex, (colData)$Replicate, sep="_")
head(new_colnames)
# Assign new column names to count_data_brain
colnames(countData) <- new_colnames
metadata <- colData[,2:3]
rownames(metadata) <- new_colnames
print("modified data")
head(countData)
head(metadata)
# Check expr dist
sumExpr <- rowSums(countData)
hist( log1p(sumExpr), breaks=30, main="Sum of gene expression values on all samples")
# remove low info rows
countData <- subset(countData, rowSums(countData[,1:ncol(countData)] > 5) > 0)
sumExpr <- rowSums(countData)
hist( log1p(sumExpr), breaks=30, main="Sum of gene expression values on all samples")
nrow(countData) # after removing low gene counts
# Create DESeq2 matrix
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = metadata,
design = ~ Sex + Age)
# Set the factor level
relevel(dds$Sex, ref = "male")
#relevel(dds$Tissue, ref = "Muscle")
relevel(dds$Age, ref = "6w")
# Run DESeq2
dds <- DESeq(dds)
# Explore results
res <- results(dds)
summary(res)
# Age results
res.age <- results(dds, contrast = c("Age", "6w", "16w"))
summary(res.age)
res.age["hdac1", ]
res.age["LOC107392535", ]
# Sex results - no sex difference
res.sex <- results(dds, contrast = c("Sex", "male", "female"))
summary(res.sex)
res.sex["hdac1", ]
res.sex["LOC107392535", ]
# PCA plot
vsdata <- vst(dds, blind=FALSE)
vsdata
pca_data <- plotPCA(vsdata, intgroup=c("Age", "Sex"), returnData=TRUE)
percentVar <- round(100 * attr(pca_data, "percentVar"))
ggplot(pca_data, aes(x=PC1, y=PC2, color=Age, shape=Sex)) +
geom_point(size=4) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
ggtitle("PCA Plot of Spleen Samples") +
theme_minimal() +
scale_color_manual(values=c("6w"="blue", "16w"="red"))
countData <- read.table("uniquelymapped/counts_Muscle.txt",  header = TRUE)
colData <- read.table("coldata_Muscle.txt", header = TRUE)
# Make sure that count_data and metadata matches by colnames against rownames
all(colnames(countData) %in% rownames(colData))
all(colnames(countData) == rownames(colData))
# Create a new column for numbering replicates
colData <- (colData) %>%
group_by(Age, Sex) %>%
mutate(Replicate = row_number()) %>%  # Assigns 1,2,3... to replicates
ungroup()
# Generate new column names in the format: Age_Sex_Number
new_colnames <- paste((colData)$Age, (colData)$Sex, (colData)$Replicate, sep="_")
head(new_colnames)
# Assign new column names to count_data_brain
colnames(countData) <- new_colnames
metadata <- colData[,2:3]
rownames(metadata) <- new_colnames
print("modified data")
head(countData)
head(metadata)
# Check expr dist
sumExpr <- rowSums(countData)
hist( log1p(sumExpr), breaks=30, main="Sum of gene expression values on all samples")
# remove low info rows
countData <- subset(countData, rowSums(countData[,1:ncol(countData)] > 5) > 0)
sumExpr <- rowSums(countData)
hist( log1p(sumExpr), breaks=30, main="Sum of gene expression values on all samples")
nrow(countData) # after removing low gene counts
# Create DESeq2 matrix
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = metadata,
design = ~ Sex + Age)
# Set the factor level
relevel(dds$Sex, ref = "male")
#relevel(dds$Tissue, ref = "Muscle")
relevel(dds$Age, ref = "6w")
# Run DESeq2
dds <- DESeq(dds)
# Explore results
res <- results(dds)
summary(res)
# Age results
res.age <- results(dds, contrast = c("Age", "6w", "16w"))
summary(res.age)
res.age["hdac1", ]
res.age["LOC107392535", ]
# Sex results - no sex difference
res.sex <- results(dds, contrast = c("Sex", "male", "female"))
summary(res.sex)
res.sex["hdac1", ]
res.sex["LOC107392535", ]
# PCA plot
vsdata <- vst(dds, blind=FALSE)
vsdata
pca_data <- plotPCA(vsdata, intgroup=c("Age", "Sex"), returnData=TRUE)
percentVar <- round(100 * attr(pca_data, "percentVar"))
ggplot(pca_data, aes(x=PC1, y=PC2, color=Age, shape=Sex)) +
geom_point(size=4) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
ggtitle("PCA Plot of Muscle Samples") +
theme_minimal() +
scale_color_manual(values=c("6w"="blue", "16w"="red"))
countData <- read.table("counts_Muscle.txt",  header = TRUE)
library(ggplot2)
library(dplyr)
# Load expression results
hdac1_results <- data.frame(
Tissue = c("Brain", "Spleen", "Heart", "Muscle"),
log2FC = c(0.26, 0.58, 0.47, 0.53),
BaseMean = c(161.9, 805.8, 230.7, 142.0)
)
hdac1b_results <- data.frame(
Tissue = c("Brain", "Spleen", "Heart", "Muscle"),
log2FC = c(0.025, 0.99, 0.25, 0.38),
BaseMean = c(15.95, 127.6, 45.4, 20.2)
)
# Merge datasets
comparison_df <- merge(hdac1_results, hdac1b_results, by="Tissue", suffixes = ("_hdac1", "_hdac1b"))
# Merge datasets
comparison_df <- merge(hdac1_results, hdac1b_results, by="Tissue", suffixes = ("_hdac1", "_hdac1b"))
library(ggplot2)
library(dplyr)
# Load expression results
hdac1_results <- data.frame(
Tissue = c("Brain", "Spleen", "Heart", "Muscle"),
log2FC = c(0.26, 0.58, 0.47, 0.53),
BaseMean = c(161.9, 805.8, 230.7, 142.0)
)
hdac1b_results <- data.frame(
Tissue = c("Brain", "Spleen", "Heart", "Muscle"),
log2FC = c(0.025, 0.99, 0.25, 0.38),
BaseMean = c(15.95, 127.6, 45.4, 20.2)
)
# Merge datasets
comparison_df <- merge(hdac1_results, hdac1b_results, by="Tissue", suffixes = c("_hdac1", "_hdac1b"))
# Check correlation between log2FC of hdac1 and hdac1b
correlation <- cor(comparison_df$log2FC_hdac1, comparison_df$log2FC_hdac1b, method = "pearson")
print(paste("Pearson correlation between hdac1 and hdac1b log2FC across tissues:", correlation))
library(ggplot2)
library(dplyr)
# Load expression results
hdac1_results <- data.frame(
Tissue = c("Brain", "Spleen", "Heart", "Muscle"),
log2FC = c(0.26, 0.58, 0.47, 0.53),
BaseMean = c(161.9, 805.8, 230.7, 142.0)
)
hdac1b_results <- data.frame(
Tissue = c("Brain", "Spleen", "Heart", "Muscle"),
log2FC = c(0.025, 0.99, 0.25, 0.38),
BaseMean = c(15.95, 127.6, 45.4, 20.2)
)
# Merge datasets
comparison_df <- merge(hdac1_results, hdac1b_results, by="Tissue", suffixes = c("_hdac1", "_hdac1b"))
# Check correlation between log2FC of hdac1 and hdac1b
correlation <- cor(comparison_df$log2FC_hdac1, comparison_df$log2FC_hdac1b, method = "pearson")
print(paste("Pearson correlation between hdac1 and hdac1b log2FC across tissues:", correlation))
ggplot(comparison_df, aes(x=log2FC_hdac1, y=log2FC_hdac1b, label=Tissue)) +
geom_point(size=4, color="blue") +
geom_text(vjust=-1, size=5) +
geom_smooth(method="lm", se=FALSE, color="red") +
labs(title="Comparison of hdac1 and hdac1b log2FC Across Tissues",
x="hdac1 log2FC (Age: 6w vs 16w)", y="hdac1b log2FC (Age: 6w vs 16w)") +
theme_minimal()
# Prepare dataset for boxplot visualization
expression_df <- data.frame(
Gene = rep(c("hdac1", "hdac1b"), each=4),
Tissue = rep(c("Brain", "Spleen", "Heart", "Muscle"), 2),
log2FC = c(comparison_df$log2FC_hdac1, comparison_df$log2FC_hdac1b)
)
# Plot boxplots
ggplot(expression_df, aes(x=Tissue, y=log2FC, fill=Gene)) +
geom_bar(stat="identity", position="dodge") +
labs(title="Expression Changes of hdac1 and hdac1b Across Tissues",
x="Tissue", y="log2 Fold Change (Age: 6w vs 16w)") +
scale_fill_manual(values=c("red", "blue")) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Load expression data
hdac1_results <- data.frame(
Tissue = c("Brain", "Spleen", "Heart", "Muscle"),
BaseMean = c(161.9, 805.8, 230.7, 142.0)
)
hdac1b_results <- data.frame(
Tissue = c("Brain", "Spleen", "Heart", "Muscle"),
BaseMean = c(15.95, 127.6, 45.4, 20.2)
)
# Merge datasets
comparison_df <- merge(hdac1_results, hdac1b_results, by="Tissue", suffixes = c("_hdac1", "_hdac1b"))
# Check correlation between BaseMean of hdac1 and hdac1b
correlation <- cor(comparison_df$BaseMean_hdac1, comparison_df$BaseMean_hdac1b, method = "pearson")
print(paste("Pearson correlation between hdac1 and hdac1b BaseMean across tissues:", correlation))
library(ggplot2)
library(dplyr)
# Load expression data
hdac1_results <- data.frame(
Tissue = c("Brain", "Spleen", "Heart", "Muscle"),
BaseMean = c(161.9, 805.8, 230.7, 142.0)
)
hdac1b_results <- data.frame(
Tissue = c("Brain", "Spleen", "Heart", "Muscle"),
BaseMean = c(15.95, 127.6, 45.4, 20.2)
)
# Merge datasets
comparison_df <- merge(hdac1_results, hdac1b_results, by="Tissue", suffixes = c("_hdac1", "_hdac1b"))
# Check correlation between BaseMean of hdac1 and hdac1b
correlation <- cor(comparison_df$BaseMean_hdac1, comparison_df$BaseMean_hdac1b, method = "pearson")
print(paste("Pearson correlation between hdac1 and hdac1b BaseMean across tissues:", correlation))
ggplot(comparison_df, aes(x=BaseMean_hdac1, y=BaseMean_hdac1b, label=Tissue)) +
geom_point(size=4, color="blue") +
geom_text(vjust=-1, size=5) +
geom_smooth(method="lm", se=FALSE, color="red") +
labs(title="Comparison of hdac1 and hdac1b BaseMean Across Tissues",
x="hdac1 BaseMean", y="hdac1b BaseMean") +
theme_minimal()
# Above plot:	If the trendline slopes upward (positive correlation), hdac1b follows the same pattern as hdac1, meaning no compensation.
# Prepare dataset for bar plot visualization
expression_df <- data.frame(
Gene = rep(c("hdac1", "hdac1b"), each=4),
Tissue = rep(c("Brain", "Spleen", "Heart", "Muscle"), 2),
BaseMean = c(comparison_df$BaseMean_hdac1, comparison_df$BaseMean_hdac1b)
)
# Plot bar chart
ggplot(expression_df, aes(x=Tissue, y=BaseMean, fill=Gene)) +
geom_bar(stat="identity", position="dodge") +
labs(title="Absolute Expression Levels of hdac1 and hdac1b Across Tissues",
x="Tissue", y="BaseMean (Absolute Expression)") +
scale_fill_manual(values=c("red", "blue")) +
theme_minimal()
library(DESeq2)
library(ggplot2)
library(dplyr)
PATH="/Users/au641161/Library/CloudStorage/OneDrive-Aarhusuniversitet/killifish_RNAseq/featureCounts/NEW/uniquely_mapped"
# Load count data and metadata
count_data <- read.table("gene_count_simple.txt", row.names = 1, header = TRUE)
View(count_data)
metadata <- read.table("my_metadata.txt", header = TRUE, row.names = 1)
# Clean column names
colnames(count_data) <- gsub("results.STAR_alignment_clean.sortedByReadName.|_Aligned.sortedByReadName.out.bam", "", colnames(count_data))
# Ensure matching sample names
count_data <- count_data[, colnames(count_data) %in% rownames(metadata)]
metadata <- metadata[colnames(count_data), ]
View(metadata)
# Convert metadata columns to factors
metadata$Age <- factor(metadata$Age, levels = c("6w", "16w"))
metadata$Sex <- factor(metadata$Sex, levels = c("male", "female"))
metadata$Tissue <- factor(metadata$Tissue, levels = c("Brain", "Heart", "Muscle", "Spleen"))
# Number replicates within each Age-Sex group
metadata <- metadata %>%
group_by(Tissue, Age, Sex) %>%
mutate(Replicate = row_number()) %>%
ungroup()
# Generate new column names in the format: Age_Sex_Number
new_colnames <- paste(metadata$Tissue, metadata$Age, metadata$Sex, metadata$Replicate, sep="_")
# Assign new column names to count_data
colnames(count_data) <- new_colnames
# Keep only relevant metadata columns
metadata <- metadata %>% dplyr::select(-Replicate)
# Update rownames in metadata
rownames(metadata) <- new_colnames
# Order metadata by Tissue, Age, and Sex
metadata <- metadata %>% arrange(Tissue, Age, Sex)
# Verify changes
head(count_data)
# Verify data consistency
stopifnot(all(colnames(count_data) == rownames(metadata)))
# Verify data consistency
stopifnot(all(colnames(count_data) == rownames(metadata)))
View(count_data)
# Load count data and metadata
count_data <- read.table("gene_count_simple.txt", row.names = 1, header = TRUE)
metadata <- read.table("my_metadata.txt", header = TRUE, row.names = 1)
# Clean column names
colnames(count_data) <- gsub("results.STAR_alignment_clean.sortedByReadName.|_Aligned.sortedByReadName.out.bam", "", colnames(count_data))
# Ensure matching sample names
count_data <- count_data[, colnames(count_data) %in% rownames(metadata)]
metadata <- metadata[colnames(count_data), ]
# Convert metadata columns to factors
metadata$Age <- factor(metadata$Age, levels = c("6w", "16w"))
metadata$Sex <- factor(metadata$Sex, levels = c("male", "female"))
metadata$Tissue <- factor(metadata$Tissue, levels = c("Brain", "Heart", "Muscle", "Spleen"))
# Number replicates within each Age-Sex group
metadata <- metadata %>%
group_by(Tissue, Age, Sex) %>%
mutate(Replicate = row_number()) %>%
ungroup()
# Generate new column names in the format: Age_Sex_Number
new_colnames <- paste(metadata$Tissue, metadata$Age, metadata$Sex, metadata$Replicate, sep="_")
# Assign new column names to count_data
colnames(count_data) <- new_colnames
# Keep only relevant metadata columns
metadata <- metadata %>% dplyr::select(-Replicate)
# Update rownames in metadata
rownames(metadata) <- new_colnames
# Order metadata by Tissue, Age, and Sex
metadata <- metadata %>% arrange(Tissue, Age, Sex)
# Reorder count_data columns to match the ordered metadata
count_data <- count_data[, rownames(metadata)]
# Verify changes
head(count_data)
head(metadata)
# Verify data consistency
stopifnot(all(colnames(count_data) == rownames(metadata)))
print("Data successfully loaded and processed!")
# Get unique tissue names
tissues <- unique(metadata$Tissue)
countData <- count_data
colData <- metadata
# Make sure that count_data and metadata matches by colnames against rownames
all(colnames(countData) %in% rownames(colData))
all(colnames(countData) == rownames(colData))
# remove low info rows
countData <- subset(countData, rowSums(countData[,1:ncol(countData)] > 5) > 0)
sumExpr <- rowSums(countData)
hist( log1p(sumExpr), breaks=30, main="Sum of gene expression values on all samples")
setwd("/Users/au641161/Library/CloudStorage/OneDrive-Aarhusuniversitet/Bioinformatics/killifish_DESeq2_Shiny/data")
# Load count data and metadata
count_data <- read.table("gene_count_simple.txt", row.names = 1, header = TRUE)
library(DESeq2)
library(ggplot2)
library(dplyr)
# Load count data and metadata
count_data <- read.table("gene_count_simple.txt", row.names = 1, header = TRUE)
getwd()
# Load count data and metadata
count_data <- read.table("../data/gene_count_simple.txt", row.names = 1, header = TRUE)
metadata <- read.table("../data/my_metadata.txt", header = TRUE, row.names = 1)
# Clean column names
colnames(count_data) <- gsub("results.STAR_alignment_clean.sortedByReadName.|_Aligned.sortedByReadName.out.bam", "", colnames(count_data))
# Ensure matching sample names
count_data <- count_data[, colnames(count_data) %in% rownames(metadata)]
metadata <- metadata[colnames(count_data), ]
# Convert metadata columns to factors
metadata$Age <- factor(metadata$Age, levels = c("6w", "16w"))
metadata$Sex <- factor(metadata$Sex, levels = c("male", "female"))
metadata$Tissue <- factor(metadata$Tissue, levels = c("Brain", "Heart", "Muscle", "Spleen"))
# Number replicates within each Age-Sex group
metadata <- metadata %>%
group_by(Tissue, Age, Sex) %>%
mutate(Replicate = row_number()) %>%
ungroup()
# Generate new column names in the format: Age_Sex_Number
new_colnames <- paste(metadata$Tissue, metadata$Age, metadata$Sex, metadata$Replicate, sep="_")
# Assign new column names to count_data
colnames(count_data) <- new_colnames
# Keep only relevant metadata columns
metadata <- metadata %>% dplyr::select(-Replicate)
# Update rownames in metadata
rownames(metadata) <- new_colnames
# Order metadata by Tissue, Age, and Sex
metadata <- metadata %>% arrange(Tissue, Age, Sex)
# Reorder count_data columns to match the ordered metadata
count_data <- count_data[, rownames(metadata)]
# Verify changes
head(count_data)
head(metadata)
# Verify data consistency
stopifnot(all(colnames(count_data) == rownames(metadata)))
print("Data successfully loaded and processed!")
# Get unique tissue names
tissues <- unique(metadata$Tissue)
# Loop through each tissue and save tissue-specific count matrices
for (tissue in tissues) {
# Filter metadata for the current tissue
metadata_tissue <- metadata %>% filter(Tissue == tissue)
# Ensure column names match the metadata Sample_ID column
selected_samples <- rownames(metadata_tissue)
# Subset the count matrix for this tissue
count_matrix_tissue <- count_data[, selected_samples, drop=FALSE]  # drop=FALSE to keep matrix format
# Save the tissue-specific count matrix
write.table(count_matrix_tissue, file=paste0(PATH, "/counts_uniquelymapped_", tissue, ".txt"), sep="\t", quote=FALSE, col.names=NA)
write.table(metadata_tissue, file=paste0(PATH, "/coldata_", tissue, ".txt"), sep="\t", quote=FALSE, col.names=NA)
# Print message
print(paste("Saved count matrix and colData for", tissue, "with", ncol(count_matrix_tissue), "samples."))
}
print("All tissue-specific count matrices saved successfully!")
getwd
getwd()
PATH = "/Users/au641161/Library/CloudStorage/OneDrive-Aarhusuniversitet/Bioinformatics/killifish_DESeq2_Shiny/data"
# Get unique tissue names
tissues <- unique(metadata$Tissue)
# Loop through each tissue and save tissue-specific count matrices
for (tissue in tissues) {
# Filter metadata for the current tissue
metadata_tissue <- metadata %>% filter(Tissue == tissue)
# Ensure column names match the metadata Sample_ID column
selected_samples <- rownames(metadata_tissue)
# Subset the count matrix for this tissue
count_matrix_tissue <- count_data[, selected_samples, drop=FALSE]  # drop=FALSE to keep matrix format
# Save the tissue-specific count matrix
write.table(count_matrix_tissue, file=paste0(PATH, "/counts_uniquelymapped_", tissue, ".txt"), sep="\t", quote=FALSE, col.names=NA)
write.table(metadata_tissue, file=paste0(PATH, "/coldata_", tissue, ".txt"), sep="\t", quote=FALSE, col.names=NA)
# Print message
print(paste("Saved count matrix and colData for", tissue, "with", ncol(count_matrix_tissue), "samples."))
}
print("All tissue-specific count matrices saved successfully!")
# Load count data and metadata
metadata_brain <- read.table("../data/coldata_Brain.txt", row.names = 1, header = TRUE)
metadata_heart <- read.table("../data/coldata_Heart.txt", row.names = 1, header = TRUE)
metadata_muscle <- read.table("../data/coldata_Muscle.txt", row.names = 1, header = TRUE)
metadata_spleen <- read.table("../data/coldata_Spleen.txt", row.names = 1, header = TRUE)
countdata_brain <- read.table("../data/counts_uniquelymapped_Brain.txt", header = TRUE, row.names = 1)
countdata_heart <- read.table("../data/counts_uniquelymapped_Heart.txt", header = TRUE, row.names = 1)
countdata_muscle <- read.table("../data/counts_uniquelymapped_Muscle.txt", header = TRUE, row.names = 1)
countdata_spleen <- read.table("../data/counts_uniquelymapped_Spleen.txt", header = TRUE, row.names = 1)
countdata_brain <- subset(countdata_brain, rowSums(countdata_brain[,1:ncol(countdata_brain)] > 5) > 0)
countdata_heart <- subset(countdata_heart, rowSums(countdata_heart[,1:ncol(countdata_heart)] > 5) > 0)
countdata_muscle <- subset(countdata_muscle, rowSums(countdata_muscle[,1:ncol(countdata_muscle)] > 5) > 0)
countdata_spleen <- subset(countdata_spleen, rowSums(countdata_spleen[,1:ncol(countdata_spleen)] > 5) > 0)
nrow(countData) # after removing low gene counts
```{r}
sumExpr <- rowSums(countdata_brain)
hist( log1p(sumExpr), breaks=30, main="Sum of gene expression values on all samples")
sumExpr <- rowSums(countdata_heart)
hist( log1p(sumExpr), breaks=30, main="Sum of gene expression values on all samples")
sumExpr <- rowSums(countdata_muscle)
hist( log1p(sumExpr), breaks=30, main="Sum of gene expression values on all samples")
sumExpr <- rowSums(countdata_spleen)
hist( log1p(sumExpr), breaks=30, main="Sum of gene expression values on all samples")
sumExpr <- rowSums(countdata_brain)
hist( log1p(sumExpr), breaks=30, main="Sum of gene expression values on brain samples")
sumExpr <- rowSums(countdata_heart)
hist( log1p(sumExpr), breaks=30, main="Sum of gene expression values on heart samples")
sumExpr <- rowSums(countdata_muscle)
hist( log1p(sumExpr), breaks=30, main="Sum of gene expression values on muscle samples")
sumExpr <- rowSums(countdata_spleen)
hist( log1p(sumExpr), breaks=30, main="Sum of gene expression values on spleen samples")
# Get unique tissue names
tissues <- unique(metadata$Tissue)
# Load count data and metadata
count_data <- read.table("../data/gene_count_simple.txt", row.names = 1, header = TRUE)
metadata <- read.table("../data/my_metadata.txt", header = TRUE, row.names = 1)
# Clean column names
colnames(count_data) <- gsub("results.STAR_alignment_clean.sortedByReadName.|_Aligned.sortedByReadName.out.bam", "", colnames(count_data))
# Ensure matching sample names
count_data <- count_data[, colnames(count_data) %in% rownames(metadata)]
metadata <- metadata[colnames(count_data), ]
# Convert metadata columns to factors
metadata$Age <- factor(metadata$Age, levels = c("6w", "16w"))
metadata$Sex <- factor(metadata$Sex, levels = c("male", "female"))
metadata$Tissue <- factor(metadata$Tissue, levels = c("Brain", "Heart", "Muscle", "Spleen"))
# Number replicates within each Age-Sex group
metadata <- metadata %>%
group_by(Tissue, Age, Sex) %>%
mutate(Replicate = row_number()) %>%
ungroup()
# Generate new column names in the format: Age_Sex_Number
new_colnames <- paste(metadata$Tissue, metadata$Age, metadata$Sex, metadata$Replicate, sep="_")
# Assign new column names to count_data
colnames(count_data) <- new_colnames
# Keep only relevant metadata columns
metadata <- metadata %>% dplyr::select(-Replicate)
# Update rownames in metadata
rownames(metadata) <- new_colnames
# Order metadata by Tissue, Age, and Sex
metadata <- metadata %>% arrange(Tissue, Age, Sex)
# Reorder count_data columns to match the ordered metadata
count_data <- count_data[, rownames(metadata)]
# Verify changes
head(count_data)
head(metadata)
# Verify data consistency
stopifnot(all(colnames(count_data) == rownames(metadata)))
print("Data successfully loaded and processed!")
# Get unique tissue names
tissues <- unique(metadata$Tissue)
# Loop through each tissue and save tissue-specific count matrices
for (tissue in tissues) {
# Filter metadata for the current tissue
metadata_tissue <- metadata %>% filter(Tissue == tissue)
# Ensure column names match the metadata Sample_ID column
selected_samples <- rownames(metadata_tissue)
# Subset the count matrix for this tissue
count_matrix_tissue <- count_data[, selected_samples, drop=FALSE]  # drop=FALSE to keep matrix format
# Save the tissue-specific count matrix
write.table(count_matrix_tissue, file=paste0("../data/counts_uniquelymapped_", tissue, ".txt"), sep="\t", quote=FALSE, col.names=NA)
write.table(metadata_tissue, file=paste0("../data/coldata_", tissue, ".txt"), sep="\t", quote=FALSE, col.names=NA)
# Print message
print(paste("Saved count matrix and colData for", tissue, "with", ncol(count_matrix_tissue), "samples."))
}
print("All tissue-specific count matrices saved successfully!")
# Get unique tissue names
tissues <- unique(metadata$Tissue)
# Loop through each tissue and save tissue-specific count matrices
for (tissue in tissues) {
# Filter metadata for the current tissue
metadata_tissue <- metadata %>% filter(Tissue == tissue)
# Ensure column names match the metadata Sample_ID column
selected_samples <- rownames(metadata_tissue)
# Subset the count matrix for this tissue
count_matrix_tissue <- count_data[, selected_samples, drop=FALSE]  # drop=FALSE to keep matrix format
# Save the tissue-specific count matrix
write.table(count_matrix_tissue, file=paste0("../data/counts_uniquelymapped_", tissue, ".txt"), sep="\t", quote=FALSE, col.names=NA)
write.table(metadata_tissue, file=paste0("../data/coldata_", tissue, ".txt"), sep="\t", quote=FALSE, col.names=NA)
# Print message
print(paste("Saved count matrix and colData for", tissue, "with", ncol(count_matrix_tissue), "samples."))
}
print("All tissue-specific count matrices saved successfully!")
